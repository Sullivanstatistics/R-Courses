{
    "collab_server" : "",
    "contents" : "---\ntitle       : Introduction to R\nsubtitle    : Tibbles in R\nauthor      : Adam J Sullivan\njob         : \nlicense     : by-nc-nd\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nwidgets     : [mathjax, quiz, bootstrap, interactive]            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\nlogo        : shield_image.png\nbiglogo     : shield_image_large.png\nknit        : slidify::knit2slides\nassets      : {assets: ../../assets}\n--- .segue bg:grey\n\n# Tibbles in R\n\n\n\n--- .class #id\n\n\n\n```{r, echo = FALSE}\nknitr::opts_chunk$set(collapse = TRUE)\nset.seed(4561)\n```\n\n\n\n## Tibbles\n\nPreviosly we have worked with data in the form of\n\n- Vectors\n- Lists\n- Arrays\n- Dataframes\n\n--- .class #id\n\n\n## Tibbles\n\n- *\"Tibbles\"* are a new modern data frame.  \n- It keeps many important features of the original data frame. \n- It removes many of the outdated features. \n\n--- .class #id\n\n## Compared to Data Frames\n\n- A *tibble* never changes the input type. \n    - No more worry of characters being automatically turned into strings. \n- A tibble can have columns that are lists.\n- A tibble can have non-standard variable names.\n    - can start with a number or contain spaces. \n    - To use this refer to these in a backtick.\n- It only recyles vectors of length 1. \n- It never creates row names.\n\n--- .class #id\n\n\n## Column-Lists\n\n```{r, message=FALSE}\nlibrary(tidyverse)\ntry <- tibble(x = 1:3, y = list(1:5, 1:10, 1:20))\ntry \n\n\n#try <- as_data_frame(c(x = 1:3, y = list(1:5, 1:10, 1:20)))\n#try\n# Leads to error\n```\n\n--- .class #id\n\n\n## Non-Standard Names\n\n```{R}\nnames(data.frame(`crazy name` = 1))\nnames(tibble(`crazy name` = 1))\n```\n\n--- .class #id\n\n## Coercing into Tibbles\n\n- A tibble can be made by coercing `as_tibble()`. \n- This works similar to `as.data.frame()`.\n- It works efficiently.\n\n--- .class #id\n\n\n## Coercing into Tibbles\n\n\n```{r}\nl <- replicate(26, sample(100), simplify = FALSE)\nnames(l) <- letters\n\nmicrobenchmark::microbenchmark(\n  as_tibble(l),\n  as.data.frame(l)\n)\n```\n\n--- .class #id\n\n## Tibbles vs Data Frames\n\nThere are a couple key differences between tibbles and data frames. \n\n- Printing.\n- Subsetting. \n\n--- .class #id\n\n## Printing\n\n- Tibbles only print the first 10 rows and all the columns that fit on a screen. - Each column displays its data type. \n- You will not accidently print too much. \n\n\n```{r}\ntibble(\n  a = lubridate::now() + runif(1e3) * 86400,\n  b = lubridate::today() + runif(1e3) * 30,\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n```\n\n--- .class #id\n\n\n\n## Subsetting\n\n\n\n- We can index a tibble in the manners we are used to\n    - `df$x`\n    - `df[[\"x\"]]`\n    - `df[[1]]`\n- We can also use a `pipe` which we will learn about later.\n    - `df %>% .$x`\n    - `df %>% .[[\"x\"]]`\n\n--- .class #id\n\n## Subsetting\n\n```{r}\ndf <- tibble(\n  x = runif(5),\n  y = rnorm(5)\n)\n\ndf$x\ndf[[\"x\"]]\ndf[[1]]\n```\n\n--- .class #id\n\n## Subsetting\n\n```{r}\ndf %>% .$x\ndf %>% .[[\"x\"]]\ndf %>% .[[1]]\n```",
    "created" : 1487363058785.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2028714175",
    "id" : "862E8CF9",
    "lastKnownWriteTime" : 1487363152,
    "last_content_update" : 1487363152539,
    "path" : "C:/Users/adam_/Dropbox/Brown/R-Basics-Course/Course Notes/14_tibbles.Rmd",
    "project_path" : "Course Notes/14_tibbles.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}