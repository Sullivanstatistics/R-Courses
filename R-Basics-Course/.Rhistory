subgraph cluster0 {
graph[rankdir = TB]
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = .25,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
graph[rankdir = TB]
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = .25,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rank = same
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = .25,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = TB
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = .25,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = .25,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = 1,
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [compound = true, ranksep = 1, nodesep=.5
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
rankdir = LR
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
nodesep = .25
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
nodesep = .25
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
nodesep = .25
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate         [tail = cluster0]
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
graph[nodesep = .25]
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate         [tail = cluster0]
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white, ranksep=1, nodesep=1]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
graph[nodesep = 2]
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate         [tail = cluster0]
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = 1, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate         [tail = cluster0]
}
")
grViz("
digraph boxes_and_circles {
# graph, node, and edge definitions
graph [ ranksep = .5, nodesep=.5
color = crimson, rankdir=LR]
node [fontname = Georgia, fontcolor = darkslategray,
shape = rectangle, fixedsize = true, width = 1,
color = white]
edge [color = grey]
# subgraph for R information
subgraph cluster0 {
Transform -> Visualize
Visualize -> Model Model -> Transform
}
Communicate [width=2]
Import -> Clean
Clean ->  Transform          [lhead = cluster0]
Model -> Communicate         [tail = cluster0]
}
")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("C:/Users/adam_/Dropbox/Brown/R-Basics-Course/Course Notes")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.html")
slidify("index.html")
slidify("index.html")
slidify("01_workflow.Rmd")
slidify("02_getting_r.Rmd")
warnings()
slidify("03_first_r.Rmd")
warnings()
slidify("04_r_calculator")
slidify("05_help.Rmd")
library("slidify")
slidify("05_help.Rmd")
setwd("C:/Users/adam_/Dropbox/Brown/R-Basics-Course/Course Notes")
slidify("05_help.Rmd")
slidfy("06_tidyverse.Rmd")
slidfy("06_tidyverse.Rmd")
slidfy("06_tidyverse.Rmd")
warnings()
warnings()
slidfy("06_tidyverse.Rmd")
library(slidify)
slidify("06_tidyverse.Rmd")
slidify("06_tidyverse.Rmd")
slidify("06_tidyverse.Rmd")
slidify("06_tidyverse.Rmd")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(slidify)
warnings()
library(slidify)
slidify("/Course Notes/06_tidyverse.Rmd")
setwd("C:/Users/adam_/Dropbox/Brown/R-Basics-Course/Course Notes")
slidify("06_tidyverse.Rmd")
slidify("05_data_import.Rmd")
slidify("05_data_import.Rmd")
slidify("07_data_import.Rmd")
?readr
library(tidyverse)
?readr
??readr
?read.csv
test1 <- c(1:5, "6,7", "8,9,10")
tf <- tempfile()
writeLines(test1, tf)
test1 <- c(1:5, "6,7", "8,9,10")
tf <- tempfile()
writeLines(test1, tf)
readLines(tf)
data()
library(tidyverse)
data()
?data
data("tidyverse")
library(tidyverse)
data("tidyverse")
data(package="tidyverse")
library(tidyverse)
data(package="tidyverse")
library(tidyverse)
data(package="MASS")
data()
data(package="tidyr")
?read.csv
# Write to a file, suppress row names
write.csv(data, "data1.csv", row.names=FALSE)
# Same, except that instead of "NA", output blank cells
write.csv(data, "data1.csv", row.names=FALSE, na="")
# Use tabs, suppress row names and column names
write.table(data, "data1.tab", sep="\t", row.names=FALSE, col.names=FALSE)
readLines(data1.csv)
# Write to a file, suppress row names
write.csv(data, "data1.csv", row.names=FALSE)
# Same, except that instead of "NA", output blank cells
write.csv(data, "data1.csv", row.names=FALSE, na="")
# Use tabs, suppress row names and column names
write.table(data, "data1.tab", sep="\t", row.names=FALSE, col.names=FALSE)
readLines(data1.csv)
data <- read.table(header=TRUE, text='
subject sex size
1   M    7
2   F    NA
3   F    9
4   M   11
')
# Write to a file, suppress row names
write.csv(data, "data1.csv", row.names=FALSE)
# Same, except that instead of "NA", output blank cells
write.csv(data, "data1.csv", row.names=FALSE, na="")
# Use tabs, suppress row names and column names
write.table(data, "data1.tab", sep="\t", row.names=FALSE, col.names=FALSE)
readLines(data1.csv)
write.csv(data, "data1.csv", row.names=FALSE)
readLines("data1.csv")
readLines("data2.csv")
write.csv(data, "data1.csv", row.names=FALSE, na="")
# Write to a file, suppress row names
write.csv(data, "data1.csv", row.names=FALSE)
# Same, except that instead of "NA", output blank cells
write.csv(data, "data2.csv", row.names=FALSE, na="")
# Use tabs, suppress row names and column names
write.table(data, "data3.tab", sep="\t", row.names=FALSE, col.names=FALSE)
data1 <- read.csv("data1.csv")
data1
?read.csv
data3 <- read.delim("data3.tab", sep="\t", header=F)
data3
?haven
library(haven)
?read_dta
?read_por
?read_sas
?read_dta
?read_por
slidify("08_data_structures.Rmd")
slidify("10_arrays.Rmd")
library(datasets)
?data
data()
library(datasets)
titanic <- data.frame(titanic)
library(datasets)
titanic <- data.frame(Titanic)
first.class.surv <- titanic[titanic$Class="1st", "Survived"]
first.class.surv
male.surv <- titanic[titanic$Sex=="Male", "Survived"]
male.surv
first.class.surv <- titanic[titanic$Class="1st", "Survived"]
first.class.surv
male.surv <- titanic[titanic$Sex=="Male", "Survived"]
male.surv
titanic[titanic$Class="1st", "Survived"]
first.class.surv <- titanic[titanic$Class=="1st", "Survived"]
first.class.surv
male.surv <- titanic[titanic$Sex=="Male", "Survived"]
male.surv
first.class.freq <- titanic[titanic$Class=="1st", "Freq"]
first.class.freq
male.freq <- titanic[titanic$Sex=="Male", "Freq"]
male.freq
sum(first.class.freq)
sum(male.freq)
head(titanic)
head(titanic, 2)
titanic$surv_percent <- titanic$Freq/sum(titanic$Freq)
head(titanic,2)
titanic$surv_percent <- titanic$Freq/sum(titanic$Freq)
head(titanic,4)
titanic$surv_p <- titanic$Freq/sum(titanic$Freq)
head(titanic,4)
titanic$surv_p <- titanic$surv_p*100
head(titanic,4)
library(slidify)
setwd("C:/Users/adam_/Dropbox/Brown/R-Basics-Course/Course Notes")
slidify("14_tibbles")
slidify("14_tibbles.Rmd")
